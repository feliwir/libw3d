#pragma once
#include <vector>
#include "../chunk.hpp"
#include "../math.hpp"

namespace libw3d
{
	class Mesh : public Chunk
	{
	public:
		struct Header
		{
		public:
			uint32_t  Version;
			uint32_t  Attributes;
			char    MeshName[W3D_NAME_LEN];
			char    ContainerName[W3D_NAME_LEN];
			//
			// Counts, these can be regarded as an inventory of what is to come in the file.
			//
			uint32_t  NumTris;             // number of triangles
			uint32_t  NumVertices;         // number of unique vertices
			uint32_t  NumMaterials;        // number of unique materials
			uint32_t  NumDamageStages;     // number of damage offset chunks
			uint32_t  SortLevel;           // static sorting level of this mesh
			uint32_t  PrelitVersion;       // mesh generated by this version of Lightmap Tool
			uint32_t  FutureCounts[1];     // future counts
			uint32_t  VertexChannels;      // bits for presence of types of per-vertex info
			uint32_t  FaceChannels;        // bits for presence of types of per-face info

										   // BOUNDING VALUES
			Vector3f   Min;       // Min corner of the bounding box
			Vector3f   Max;       // Max corner of the bounding box
			Vector3f   SphCenter; // Center of bounding sphere
			float      SphRadius; // Bounding sphere radius
		};

		struct Triangle
		{
			uint32_t Indices[3];
			uint32_t Attributes;
			Vector3f Normal;
			float	 Distance;
		};

		struct Influence
		{
			uint16_t Bone;
			uint16_t Bone2;
			uint8_t Pad[4];
		};

		struct MaterialInfo
		{
			uint32_t  PassCount;              // how many material passes this render object uses
			uint32_t  VertexMaterialCount;    // how many vertex materials are used
			uint32_t  ShaderCount;            // how many shaders are used
			uint32_t  TextureCount;           // how many textures are used
		} ;
	public:
		virtual void Load(std::ifstream& fin, uint32_t chunksize) override;
	public:
		Header MeshHeader;
		std::vector<Vector3f>	Vertices;
		std::vector<Vector3f>	Normals;
		std::vector<Triangle>	Triangles;
		std::vector<Influence>	VertexInfluences;
		std::vector<uint32_t>	ShadeIndices;
		MaterialInfo			MatInfo;
	};
}