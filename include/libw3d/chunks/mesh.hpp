#pragma once
#include "../chunk.hpp"
#include "../math.hpp"

namespace libw3d
{
    class MeshHeader : public Chunk
    {
		uint32_t  Version;
		uint32_t  Attributes;
		char    MeshName[W3D_NAME_LEN];
		char    ContainerName[W3D_NAME_LEN];
		//
		// Counts, these can be regarded as an inventory of what is to come in the file.
		//
		uint32_t  NumTris;             // number of triangles
		uint32_t  NumVertices;         // number of unique vertices
		uint32_t  NumMaterials;        // number of unique materials
		uint32_t  NumDamageStages;     // number of damage offset chunks
		uint32_t  SortLevel;           // static sorting level of this mesh
		uint32_t  PrelitVersion;       // mesh generated by this version of Lightmap Tool
		uint32_t  FutureCounts[1];     // future counts
		uint32_t  VertexChannels;      // bits for presence of types of per-vertex info
		uint32_t  FaceChannels;        // bits for presence of types of per-face info
		
		// BOUNDING VALUES
		Vector3f   Min;       // Min corner of the bounding box
		Vector3f   Max;       // Max corner of the bounding box
		Vector3f   SphCenter; // Center of bounding sphere
		float      SphRadius; // Bounding sphere radius
    };

	class Mesh : public Chunk
	{
	public:
		virtual void Load(std::ifstream& fin, uint32_t chunksize) override;
	};
}