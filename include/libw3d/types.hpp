#pragma once
#include <stdint.h>
#include <vector>
#include "math.hpp"

#define W3D_MAKE_VERSION(major,minor)   (((major) << 16) | (minor))
#define W3D_GET_MAJOR_VERSION(ver)      ((ver)>>16)
#define W3D_GET_MINOR_VERSION(ver)      ((ver) & 0xFFFF)
#define W3D_NAME_LEN    16
#define W3D_TYPE_LEN    32

namespace libw3d
{
#pragma pack(push, 1)
	enum NormMapHeaderType : uint32_t
	{
		NORMTYPE_TEXTURE = 1,
		NORMTYPE_BUMP = 2,
		NORMTYPE_COLORS = 5,
		NORMTYPE_ALPHA = 7
	};

	struct NormMapHeaderStruct
	{
		uint8_t		Number;
		char		TypeName[W3D_TYPE_LEN];
		uint32_t	Reserved;
	};

	// New entry item structure for BFME2 ....
	struct NormMapEntryStruct
	{
		NormMapHeaderType	TypeFlag;
		uint32_t			TypeSize;
		std::string			TypeName;
		uint32_t			ItemSize;
		std::string			ItemName;
		float 				ItemScalar;
		Vector4f			ItemColor;
		uint8_t				ItemAlpha;
	};


	struct HierarchyHeader
	{
		uint32_t    Version;
		char        Name[W3D_NAME_LEN];    // Name of the hierarchy
		uint32_t	NumPivots;
		Vector3f    Center;
	};

	struct Pivot
	{
		char        Name[W3D_NAME_LEN];    // Name of the node (UR_ARM, LR_LEG, TORSO, etc)
		int32_t		ParentIdx;             // 0xffffffff = root pivot; no parent
		Vector3f    Translation;           // translation to pivot point
		Vector3f    EulerAngles;           // orientation of the pivot point
		Quaternion  Rotation;              // orientation of the pivot point
	};

	struct HLodHeader
	{
		uint32_t Version;
		uint32_t LodCount;
		char     Name[W3D_NAME_LEN];
		char     HierarchyName[W3D_NAME_LEN];  // name of the hierarchy tree to use (\0 if none)
	};

	struct HLodArrayHeader
	{
		uint32_t	ModelCount;
		float		MaxScreenSize;  // if model is bigger than this, switch to higher lod.
	};

	struct HLodSubObject
	{
		uint32_t BoneIndex;
		char     Name[W3D_NAME_LEN * 2];
	};

	struct ChannelHeader
	{
		uint16_t FirstFrame;
		uint16_t FastFrame;
		uint16_t VectorLen;
		uint16_t Flags;
		uint16_t Pivot;
		uint16_t Pad;
		std::vector<uint8_t> Data;
	};

	struct MotionChannelHeader
	{
		uint8_t Zero;
		uint8_t DeltaType;
		uint8_t VectorLen;
		uint8_t Flags;
		uint16_t Framecount;
		uint16_t Pivot;
	};

	enum AnimationDeltaType
	{
		TIMECODED = 0,
		DELTA4 = 1,
		DELTA8 = 2
	};

	struct MeshHeader
	{
	public:
		uint32_t  Version;
		uint32_t  Attributes;
		char    MeshName[W3D_NAME_LEN];
		char    ContainerName[W3D_NAME_LEN];
		//
		// Counts, these can be regarded as an inventory of what is to come in the file.
		//
		uint32_t  NumTris;             // number of triangles
		uint32_t  NumVertices;         // number of unique vertices
		uint32_t  NumMaterials;        // number of unique materials
		uint32_t  NumDamageStages;     // number of damage offset chunks
		uint32_t  SortLevel;           // static sorting level of this mesh
		uint32_t  PrelitVersion;       // mesh generated by this version of Lightmap Tool
		uint32_t  FutureCounts[1];     // future counts
		uint32_t  VertexChannels;      // bits for presence of types of per-vertex info
		uint32_t  FaceChannels;        // bits for presence of types of per-face info

									   // BOUNDING VALUES
		Vector3f   Min;       // Min corner of the bounding box
		Vector3f   Max;       // Max corner of the bounding box
		Vector3f   SphCenter; // Center of bounding sphere
		float      SphRadius; // Bounding sphere radius
	};

	struct Triangle
	{
		uint32_t Indices[3];
		uint32_t Attributes;
		Vector3f Normal;
		float	 Distance;
	};

	struct Influence
	{
		uint16_t Bone;
		uint16_t Bone2;
		uint8_t Pad[4];
	};

	struct MaterialInfo
	{
		uint32_t  PassCount;              // how many material passes this render object uses
		uint32_t  VertexMaterialCount;    // how many vertex materials are used
		uint32_t  ShaderCount;            // how many shaders are used
		uint32_t  TextureCount;           // how many textures are used
	};

	struct AnimationHeader
	{
		uint32_t Version;
		char Name[W3D_NAME_LEN];
		char HierarchyName[W3D_NAME_LEN];
		uint32_t NumFrames;
		uint16_t FrameRate;
	};

	struct CompressedAnimationHeader
	{
		uint32_t Version;
		char Name[W3D_NAME_LEN];
		char HierarchyName[W3D_NAME_LEN];
		uint32_t NumFrames;
		uint16_t FrameRate;
		uint16_t Flavor;
	};

	enum ChunkType : uint32_t
	{
		MESH = 0x00000000,                // Mesh definition
		VERTICES = 0x00000002,            // array of vertices (array of W3dVectorStruct's)
		VERTICES_COPY = 0x00000C00,       // array of vertices (array of W3dVectorStruct's for BFME)
		VERTEX_NORMALS = 0x00000003,      // array of normals  (array of W3dVectorStruct's)
		VERTEX_NORMALS_COPY = 0x00000C01, // array of normals  (array of W3dVectorStruct's for BFME)

		MESH_USER_TEXT = 0x0000000C,       // Text from the MAX comment field (Null terminated string)
		VERTEX_INFLUENCES = 0x0000000E,    // Mesh Deformation vertex connections (array of W3dVertInfStruct's)
		MESH_HEADER3 = 0x0000001F,         // Mesh header contains general info about the mesh. (W3dMeshHeader3Struct)
		TRIANGLES = 0x00000020,            // New improved triangles chunk (array of W3dTriangleStruct's)
		VERTEX_SHADE_INDICES = 0x00000022, // shade indexes for each vertex (array of uint32's)

		PRELIT_UNLIT = 0x00000023,                  // optional unlit material chunk wrapper
		PRELIT_VERTEX = 0x00000024,                 // optional vertex-lit material chunk wrapper
		PRELIT_LIGHTMAP_MULTI_PASS = 0x00000025,    // optional lightmapped multi-pass material chunk wrapper
		PRELIT_LIGHTMAP_MULTI_TEXTURE = 0x00000026, // optional lightmapped multi-texture material chunk wrapper

		MATERIAL_INFO = 0x00000028, // materials information, pass count, etc (contains W3dMaterialInfoStruct)
		SHADERS = 0x00000029,       // shaders (array of W3dShaderStruct's)

		VERTEX_MATERIALS = 0x0000002A, // wraps the vertex materials
		VERTEX_MATERIAL = 0x0000002B,
		VERTEX_MATERIAL_NAME = 0x0000002C, // vertex material name (NULL-terminated string)
		VERTEX_MATERIAL_INFO = 0x0000002D, // W3dVertexMaterialStruct
		VERTEX_MAPPER_ARGS0 = 0x0000002E,  // Null-terminated string
		VERTEX_MAPPER_ARGS1 = 0x0000002F,  // Null-terminated string

		TEXTURES = 0x00000030,     // wraps all of the texture info
		TEXTURE = 0x00000031,      // wraps a texture definition
		TEXTURE_NAME = 0x00000032, // texture filename (NULL-terminated string)
		TEXTURE_INFO = 0x00000033, // optional W3dTextureInfoStruct

		MATERIAL_PASS = 0x00000038,       // wraps the information for a single material pass
		VERTEX_MATERIAL_IDS = 0x00000039, // single or per-vertex array of uint32 vertex material indices (check chunk size)
		SHADER_IDS = 0x0000003A,          // single or per-tri array of uint32 shader indices (check chunk size)
		DCG = 0x0000003B,                 // per-vertex diffuse color values (array of W3dRGBAStruct's)
		DIG = 0x0000003C,                 // per-vertex diffuse illumination values (array of W3dRGBStruct's)
		SCG = 0x0000003E,                 // per-vertex specular color values (array of W3dRGBStruct's)

		TEXTURE_STAGE = 0x00000048,         // wrapper around a texture stage.
		TEXTURE_IDS = 0x00000049,           // single or per-tri array of uint32 texture indices (check chunk size)
		STAGE_TEXCOORDS = 0x0000004A,       // per-vertex texture coordinates (array of W3dTexCoordStruct's)
		PER_FACE_TEXCOORD_IDS = 0x0000004B, // indices to STAGE_TEXCOORDS, (array of Vector3i)

		NORMALMAP_INFO = 0x00000050,  // texture array for BFME2 (???)
		NORMALMAP_ENTRY = 0x00000051, // texture entry for BFME2 (???)
		NORMALMAP_HEADER = 0x00000052, // material/texture structure  of W3dNormMapHeaderStruct for BFME2
		NORMALMAP_CONTENT = 0x00000053, // array of texture structures of W3dNormMapEntryStruct for BFME2

		DEFORM = 0x00000058,          // mesh deform or 'damage' information.
		DEFORM_SET = 0x00000059,      // set of deform information
		DEFORM_KEYFRAME = 0x0000005A, // a keyframe of deform information in the set
		DEFORM_DATA = 0x0000005B,     // deform information about a single vertex

		TANGENTS = 0x00000060,
		BITANGENTS = 0x00000061,

		PS2_SHADERS = 0x00000080, // Shader info specific to the Playstation 2.
		AABTREE = 0x00000090,     // Axis-Aligned Box Tree for hierarchical polygon culling
		AABTREE_HEADER,           // catalog of the contents of the AABTree
		AABTREE_POLYINDICES,      // array of uint32 polygon indices with count=mesh.PolyCount
		AABTREE_NODES,            // array of W3dMeshAABTreeNode's with count=aabheader.NodeCount

		HIERARCHY = 0x00000100, // hierarchy tree definition
		HIERARCHY_HEADER,
		PIVOTS,
		PIVOT_FIXUPS, // only needed by the exporter...

		ANIMATION = 0x00000200, // hierarchy animation data
		ANIMATION_HEADER,
		ANIMATION_CHANNEL, // channel of vectors
		BIT_CHANNEL,       // channel of boolean values (e.g. visibility)

		COMPRESSED_ANIMATION = 0x00000280,		// compressed hierarchy animation data
		COMPRESSED_ANIMATION_HEADER,			// describes playback rate, number of frames, and type of compression
		COMPRESSED_ANIMATION_CHANNEL,			// compressed channel, format dependent on type of compression
		COMPRESSED_BIT_CHANNEL,					// compressed bit stream channel, format dependent on type of compression
		COMPRESSED_ANIMATION_MOTION_CHANNEL,    // compressed animation data for BFME2 ??? dependent on type of compression

		MORPH_ANIMATION = 0x000002C0, // hierarchy morphing animation data (morphs between poses, for facial animation)
		MORPHANIM_HEADER,             // W3dMorphAnimHeaderStruct describes playback rate, number of frames, and type of compression
		MORPHANIM_CHANNEL,            // wrapper for a channel
		MORPHANIM_POSENAME,           // name of the other anim which contains the poses for this morph channel
		MORPHANIM_KEYDATA,            // morph key data for this channel
		MORPHANIM_PIVOTCHANNELDATA,   // uin32 per pivot in the htree, indicating which channel controls the pivot

		HMODEL = 0x00000300,      // blueprint for a hierarchy model
		HMODEL_HEADER,            // Header for the hierarchy model
		NODE,                     // render objects connected to the hierarchy
		COLLISION_NODE,           // collision meshes connected to the hierarchy
		SKIN_NODE,                // skins connected to the hierarchy
		OBSOLETE_HMODEL_AUX_DATA, // extension of the hierarchy model header
		OBSOLETE_SHADOW_NODE,     // shadow object connected to the hierarchy

		LODMODEL = 0x00000400, // blueprint for an LOD model. This is simply a
		LODMODEL_HEADER,       // collection of 'n' render objects, ordered in terms
		LOD,                   // of their expected rendering costs. (highest is first)

		COLLECTION = 0x00000420, // collection of render object names
		COLLECTION_HEADER,       // general info regarding the collection
		COLLECTION_OBJ_NAME,     // contains a string which is the name of a render object
		PLACEHOLDER,             // contains information about a 'dummy' object that will be instanced later
		TRANSFORM_NODE,          // contains the filename of another w3d file that should be transformed by this node

		POINTS = 0x00000440, // array of W3dVectorStruct's. May appear in meshes, hmodels, lodmodels, or collections.

		LIGHT = 0x00000460, // description of a light
		LIGHT_INFO,         // generic light parameters
		SPOT_LIGHT_INFO,    // extra spot light parameters
		NEAR_ATTENUATION,   // optional near attenuation parameters
		FAR_ATTENUATION,    // optional far attenuation parameters

		EMITTER = 0x00000500,              // description of a particle emitter
		EMITTER_HEADER,                    // general information such as name and version
		EMITTER_USER_DATA,                 // user-defined data that specific loaders can switch on
		EMITTER_INFO,                      // generic particle emitter definition
		EMITTER_INFOV2,                    // generic particle emitter definition (version 2.0)
		EMITTER_PROPS,                     // Key-frameable properties
		OBSOLETE_EMITTER_COLOR_KEYFRAME,   // structure defining a single color keyframe
		OBSOLETE_EMITTER_OPACITY_KEYFRAME, // structure defining a single opacity keyframe
		OBSOLETE_EMITTER_SIZE_KEYFRAME,    // structure defining a single size keyframe
		EMITTER_LINE_PROPERTIES,           // line properties, used by line rendering mode
		EMITTER_ROTATION_KEYFRAMES,        // rotation keys for the particles
		EMITTER_FRAME_KEYFRAMES,           // frame keys (u-v based frame animation)
		EMITTER_BLUR_TIME_KEYFRAMES,       // length of tail for line groups

		AGGREGATE = 0x00000600, // description of an aggregate object
		AGGREGATE_HEADER,       // general information such as name and version
		AGGREGATE_INFO,         // references to 'contained' models
		TEXTURE_REPLACER_INFO,  // information about which meshes need textures replaced
		AGGREGATE_CLASS_INFO,   // information about the original class that created this aggregate

		HLOD = 0x00000700,            // description of an HLod object (see HLodClass)
		HLOD_HEADER,                  // general information such as name and version
		HLOD_LOD_ARRAY,               // wrapper around the array of objects for each level of detail
		HLOD_SUB_OBJECT_ARRAY_HEADER, // info on the objects in this level of detail array
		HLOD_SUB_OBJECT,              // an object in this level of detail array
		HLOD_AGGREGATE_ARRAY,         // array of aggregates, contains SUB_OBJECT_ARRAY_HEADER and SUB_OBJECT_ARRAY
		HLOD_PROXY_ARRAY,             // array of proxies, used for application-defined purposes, provides a name and a bone.

		BOX = 0x00000740, // defines an collision box render object (W3dBoxStruct)
		SPHERE,
		RING,

		NULL_OBJECT = 0x00000750, // defines a NULL object (W3dNullObjectStruct)

		LIGHTSCAPE = 0x00000800, // wrapper for lights created with Lightscape.
		LIGHTSCAPE_LIGHT,        // definition of a light created with Lightscape.
		LIGHT_TRANSFORM,         // position and orientation (defined as right-handed 4x3 matrix transform W3dLightTransformStruct).

		DAZZLE = 0x00000900, // wrapper for a glare object. Creates halos and flare lines seen around a bright light source
		DAZZLE_NAME,         // null-terminated string, name of the dazzle (typical w3d object naming: "container.object")
		DAZZLE_TYPENAME,     // null-terminated string, type of dazzle (from dazzle.ini)

		SOUNDROBJ = 0x00000A00, // description of a sound render object
		SOUNDROBJ_HEADER,       // general information such as name and version
		SOUNDROBJ_DEFINITION,   // chunk containing the definition of the sound that is to play
	};

	//--------------------------------------------------------------------------------
	// Flags for the Mesh Attributes member
	//--------------------------------------------------------------------------------
	#define W3D_MESH_FLAG_NONE                            0x00000000  // plain ole normal mesh
	#define W3D_MESH_FLAG_COLLISION_BOX                   0x00000001  // (obsolete as of 4.1) mesh is a collision box (should be 8 verts, should be hidden, etc)
	#define W3D_MESH_FLAG_SKIN                            0x00000002  // (obsolete as of 4.1) skin mesh
	#define W3D_MESH_FLAG_SHADOW                          0x00000004  // (obsolete as of 4.1) intended to be projected as a shadow
	#define W3D_MESH_FLAG_ALIGNED                         0x00000008  // (obsolete as of 4.1) always aligns with camera

	#define W3D_MESH_FLAG_COLLISION_TYPE_MASK             0x00000FF0  // mask for the collision type bits
	#define W3D_MESH_FLAG_COLLISION_TYPE_SHIFT                     4  // shifting to get to the collision type bits
	#define W3D_MESH_FLAG_COLLISION_TYPE_PHYSICAL         0x00000010  // physical collisions
	#define W3D_MESH_FLAG_COLLISION_TYPE_PROJECTILE       0x00000020  // projectiles (rays) collide with this
	#define W3D_MESH_FLAG_COLLISION_TYPE_VIS              0x00000040  // vis rays collide with this mesh
	#define W3D_MESH_FLAG_COLLISION_TYPE_CAMERA           0x00000080  // camera rays/boxes collide with this mesh
	#define W3D_MESH_FLAG_COLLISION_TYPE_VEHICLE          0x00000100  // vehicles collide with this mesh (and with physical collision meshes)

	#define W3D_MESH_FLAG_HIDDEN                          0x00001000  // this mesh is hidden by default
	#define W3D_MESH_FLAG_TWO_SIDED                       0x00002000  // render both sides of this mesh
	#define OBSOLETE_W3D_MESH_FLAG_LIGHTMAPPED            0x00004000  // obsolete lightmapped mesh
		// NOTE: retained for backwards compatibility - use W3D_MESH_FLAG_PRELIT_* instead.
	#define W3D_MESH_FLAG_CAST_SHADOW                     0x00008000  // this mesh casts shadows

	#define W3D_MESH_FLAG_GEOMETRY_TYPE_MASK              0x00FF0000  // (introduced with 4.1)
	#define W3D_MESH_FLAG_GEOMETRY_TYPE_NORMAL            0x00000000  // (4.1+) normal mesh geometry
	#define W3D_MESH_FLAG_GEOMETRY_TYPE_CAMERA_ALIGNED    0x00010000  // (4.1+) camera aligned mesh
	#define W3D_MESH_FLAG_GEOMETRY_TYPE_SKIN              0x00020000  // (4.1+) skin mesh
	#define OBSOLETE_W3D_MESH_FLAG_GEOMETRY_TYPE_SHADOW   0x00030000  // (4.1+) shadow mesh OBSOLETE!
	#define W3D_MESH_FLAG_GEOMETRY_TYPE_AABOX             0x00040000  // (4.1+) aabox OBSOLETE!
	#define W3D_MESH_FLAG_GEOMETRY_TYPE_OBBOX             0x00050000  // (4.1+) obbox OBSOLETE!
	#define W3D_MESH_FLAG_GEOMETRY_TYPE_CAMERA_ORIENTED   0x00060000  // (4.1+) camera oriented mesh (points _towards_ camera)

	#define W3D_MESH_FLAG_PRELIT_MASK                     0x0F000000  // (4.2+)
	#define W3D_MESH_FLAG_PRELIT_UNLIT                    0x01000000  // mesh contains an unlit material chunk wrapper
	#define W3D_MESH_FLAG_PRELIT_VERTEX                   0x02000000  // mesh contains a precalculated vertex-lit material chunk wrapper
	#define W3D_MESH_FLAG_PRELIT_LIGHTMAP_MULTI_PASS      0x04000000  // mesh contains a precalculated multi-pass lightmapped material chunk wrapper
	#define W3D_MESH_FLAG_PRELIT_LIGHTMAP_MULTI_TEXTURE   0x08000000  // mesh contains a precalculated multi-texture lightmapped material chunk wrapper

	#define W3D_MESH_FLAG_SHATTERABLE                     0x10000000  // this mesh is shatterable.
	#define W3D_MESH_FLAG_NPATCHABLE                      0x20000000  // it is ok to NPatch this mesh
#pragma pack(pop)
}